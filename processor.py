# processor.py ‚Äî –æ–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å –ª–æ–≥–∏–∫–æ–π "–ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª = –¥–æ color_column –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ"

import time
import os
from pathlib import Path
from openpyxl import load_workbook
from openpyxl.styles import Font, Border, Side, Alignment, PatternFill
from openpyxl.utils import get_column_letter, column_index_from_string
from copy import copy

def get_cell_color(cell):
    fill = cell.fill
    if not fill or fill.fgColor is None:
        return None
    fg = fill.fgColor
    if fg.type == 'rgb':
        rgb = fg.rgb
        return rgb[2:].upper() if rgb and rgb.startswith('FF') else rgb.upper() if rgb else None
    elif fg.type == 'theme':
        theme = fg.theme or 0
        tint = round(fg.tint or 0.0, 6)
        return f"THEME_{theme}_{tint}"
    elif fg.type == 'indexed':
        return f"INDEXED_{fg.indexed}"
    return None

def expand_column_range(col_range):
    if not col_range:
        return []
    if ':' not in col_range:
        return [col_range]
    start, end = col_range.split(':')
    start_idx = column_index_from_string(start)
    end_idx = column_index_from_string(end)
    return [get_column_letter(i) for i in range(start_idx, end_idx + 1)]

def process_excel(CONFIG, log_callback=None):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü—Ä–∏–Ω–∏–º–∞–µ—Ç CONFIG –∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π callback –¥–ª—è –ª–æ–≥–æ–≤.
    """
    def log(msg):
        if log_callback:
            log_callback(msg)
        else:
            print(msg)

    try:
        start = time.perf_counter()

        if CONFIG['output_file'] is None:
            p = Path(CONFIG['input_file'])
            CONFIG['output_file'] = str(p.parent / (p.stem + '_–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–π' + p.suffix))

        log(f"‚úÖ –§–∞–π–ª –±—É–¥–µ—Ç –ø—Ä–æ—á–∏—Ç–∞–Ω: {CONFIG['input_file']}")
        log(f"üíæ –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è: {CONFIG['output_file']}")

        if os.path.exists(CONFIG['output_file']):
            try:
                os.rename(CONFIG['output_file'], CONFIG['output_file'])
            except PermissionError:
                raise PermissionError(f"–§–∞–π–ª –æ—Ç–∫—Ä—ã—Ç –≤ Excel: {CONFIG['output_file']}. –ó–∞–∫—Ä–æ–π—Ç–µ –µ–≥–æ.")

        wb = load_workbook(CONFIG['input_file'], data_only=True)
        temp_wb = load_workbook(CONFIG['input_file'])
        log(f"‚úÖ –ö–Ω–∏–≥–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –õ–∏—Å—Ç—ã: {wb.sheetnames}")

        elapsed = time.perf_counter() - start
        log(f"‚è±Ô∏è  –í—Ä–µ–º—è –∑–∞–≥—Ä—É–∑–∫–∏ –∫–Ω–∏–≥–∏: {elapsed:.3f} —Å–µ–∫")

        for sheet_name in (CONFIG['sheet_names'] or wb.sheetnames):
            log(f"\n{'='*60}")
            log(f"üìã –û–ë–†–ê–ë–û–¢–ö–ê –õ–ò–°–¢–ê: '{sheet_name}'")
            log(f"{'='*60}")
            start1 = time.perf_counter()

            ws = wb[sheet_name]
            temp_ws = temp_wb[sheet_name]

            last_row = None
            data_cols = set()

            # --- –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –î–ò–ê–ü–ê–ó–û–ù–ê –î–ê–ù–ù–´–• ---
            scan_row = CONFIG.get('scan_columns_by_row')

            if scan_row is not None:
                # ‚úÖ –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –ë–µ—Ä—ë–º –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã –æ—Ç A –¥–æ color_column –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ
                log(f"üîç –†–µ–∂–∏–º '–ë–æ–ª—å—à–æ–π —Ñ–∞–π–ª': —Å–∫–∞–Ω–∏—Ä—É–µ–º —Å—Ç–æ–ª–±—Ü—ã –¥–æ '{CONFIG['color_column']}' –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ...")
                color_col_idx = column_index_from_string(CONFIG['color_column'])
                for col_idx in range(1, color_col_idx + 1):  # –æ—Ç A –¥–æ color_column
                    data_cols.add(col_idx)
                # –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É —Ç–æ–ª—å–∫–æ –≤ —ç—Ç–∏—Ö —Å—Ç–æ–ª–±—Ü–∞—Ö
                for row in range(CONFIG['min_row'], ws.max_row + 1):
                    for col in data_cols:
                        cell = ws.cell(row=row, column=col)
                        if cell.value not in [None, ""]:
                            last_row = row if last_row is None else max(last_row, row)
            else:
                # üìä –°—Ç–∞—Ä–∞—è –ª–æ–≥–∏–∫–∞: —Å–∫–∞–Ω–∏—Ä—É–µ–º –≤—Å–µ —Å—Ç–æ–ª–±—Ü—ã –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º
                log("üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö —Å—Ç–æ–ª–±—Ü–æ–≤ –ø–æ –≤—Å–µ–º —Å—Ç—Ä–æ–∫–∞–º...")
                for row in range(CONFIG['min_row'], ws.max_row + 1):
                    for col in range(1, ws.max_column + 1):
                        cell = ws.cell(row=row, column=col)
                        if cell.value not in [None, ""]:
                            last_row = row if last_row is None else max(last_row, row)
                            data_cols.add(col)

            if last_row is None:
                log("‚ö†Ô∏è  –õ–∏—Å—Ç –ø—É—Å—Ç ‚Äî –ø—Ä–æ–ø—É—Å–∫–∞–µ–º.")
                continue

            used_cols = set(data_cols)
            if CONFIG['hierarchy_column'] is not None:
                h_col_idx = column_index_from_string(CONFIG['hierarchy_column'])
                used_cols.add(h_col_idx)
            used_cols = sorted(used_cols)
            used_cols_letters = {get_column_letter(col) for col in used_cols}

            log(f"üìè –î–∏–∞–ø–∞–∑–æ–Ω: —Å—Ç—Ä–æ–∫–∏ {CONFIG['min_row']}‚Äì{last_row}, —Å—Ç–æ–ª–±—Ü—ã: {get_column_letter(used_cols[0])}‚Äì{get_column_letter(used_cols[-1])}")

            levels = {}
            if (CONFIG['stages']['hierarchy'] or CONFIG['stages']['grouping']) and CONFIG['hierarchy_column'] is not None:
                log("üîç –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω–µ–π –ø–æ —Ü–≤–µ—Ç—É...")

                seen_colors = []
                white_like = [None, 'FFFFFFFF', '00000000']

                for row in range(CONFIG['min_row'], last_row + 1):
                    cell = temp_ws.cell(row=row, column=column_index_from_string(CONFIG['color_column']))
                    color = get_cell_color(cell)
                    if color not in white_like and color not in seen_colors:
                        seen_colors.append(color)

                color_to_level = {color: i + 1 for i, color in enumerate(seen_colors or ['DUMMY'])}
                last_level = len(seen_colors) + 1 if seen_colors else 2
                for white in white_like:
                    color_to_level[white] = last_level

                for row in range(CONFIG['min_row'], last_row + 1):
                    cell = temp_ws.cell(row=row, column=column_index_from_string(CONFIG['color_column']))
                    color = get_cell_color(cell)
                    levels[row] = color_to_level.get(color, last_level)

            if CONFIG['stages']['hierarchy'] and CONFIG['hierarchy_column'] is not None:
                counter = [0] * 10
                h_col_idx = column_index_from_string(CONFIG['hierarchy_column'])
                for row in range(CONFIG['min_row'], last_row + 1):
                    level = levels[row]
                    for i in range(level + 1, 10):
                        counter[i] = 0
                    counter[level] += 1
                    num = '.'.join(str(counter[i]) for i in range(1, level + 1) if counter[i] > 0)
                    cell = ws.cell(row=row, column=h_col_idx)
                    cell.value = num
                    cell.data_type = 's'
                log("‚úÖ –ò–µ—Ä–∞—Ä—Ö–∏—á–µ—Å–∫–∞—è –Ω—É–º–µ—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")

            if CONFIG['stages']['hierarchy_colors'] and CONFIG['hierarchy_column'] is not None:
                for row in range(CONFIG['min_row'], last_row + 1):
                    temp_color_cell = temp_ws.cell(row=row, column=column_index_from_string(CONFIG['color_column']))
                    has_color = get_cell_color(temp_color_cell) not in [None, 'FFFFFFFF', '00000000']
                    level = levels.get(row, 9)
                    cell = ws.cell(row=row, column=column_index_from_string(CONFIG['hierarchy_column']))
                    if has_color and temp_color_cell.fill:
                        cell.fill = copy(temp_color_cell.fill)
                log("‚úÖ –í –Ω—É–º–µ—Ä–∞—Ü–∏—é –¥–æ–±–∞–≤–ª–µ–Ω —Ü–≤–µ—Ç –∏–∑ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ —Å—Ç–æ–ª–±—Ü–∞")

            if CONFIG['stages']['grouping'] and CONFIG['hierarchy_column'] is not None:
                for row in range(CONFIG['min_row'], last_row + 1):
                    ws.row_dimensions[row].outlineLevel = 0
                    ws.row_dimensions[row].hidden = False
                    ws.row_dimensions[row].collapsed = False

                for current_level in range(1, 8):
                    i = 0
                    while i < last_row - CONFIG['min_row'] + 1:
                        row = CONFIG['min_row'] + i
                        level = levels.get(row, 9)
                        if level == current_level:
                            end_row = last_row
                            for j in range(i + 1, last_row - CONFIG['min_row'] + 1):
                                next_row = CONFIG['min_row'] + j
                                next_level = levels.get(next_row, 9)
                                if next_level <= current_level:
                                    end_row = next_row - 1
                                    break
                            if row < end_row:
                                ws.row_dimensions[row].outlineLevel = current_level - 1
                                ws.row_dimensions[row].collapsed = True
                                for r in range(row + 1, end_row + 1):
                                    nested_level = levels.get(r, 9)
                                    if nested_level > current_level:
                                        ws.row_dimensions[r].outlineLevel = current_level
                        i += 1

                if hasattr(ws, 'sheet_properties') and hasattr(ws.sheet_properties, 'outlinePr'):
                    ws.sheet_properties.outlinePr.summaryBelow = True
                    ws.sheet_properties.outlinePr.summaryRight = True
                    ws.sheet_properties.outlinePr.showOutlineSymbols = True

                log("‚úÖ –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞")

            if CONFIG['stages']['wrap_text'] and CONFIG['wrap_text_columns']:
                log("üîÅ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–Ω–æ—Å–∞ —Ç–µ–∫—Å—Ç–∞...")
                wrap_cols = [
                    col for col in CONFIG['wrap_text_columns']
                    if col in used_cols_letters
                ]
                for row in range(CONFIG['min_row'], last_row + 1):
                    if ws.row_dimensions[row].height is not None:
                        ws.row_dimensions[row].height = None
                    for col_letter in wrap_cols:
                        col_idx = column_index_from_string(col_letter)
                        cell = ws.cell(row=row, column=col_idx)
                        h_align = cell.alignment.horizontal if cell.alignment and cell.alignment.horizontal else 'left'
                        v_align = cell.alignment.vertical if cell.alignment and cell.alignment.vertical else 'bottom'
                        cell.alignment = Alignment(
                            horizontal=h_align,
                            vertical=v_align,
                            wrap_text=True
                        )
                log(f"‚úÖ –ü–µ—Ä–µ–Ω–æ—Å —Ç–µ–∫—Å—Ç–∞: {', '.join(wrap_cols)}")

            if CONFIG['stages']['alignment'] and CONFIG['alignment_rules']:
                log("üìè –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è...")
                applied_cols = set()
                for rule in CONFIG['alignment_rules']:
                    if len(rule) != 3:
                        continue
                    col_range, vertical, horizontal = rule
                    cols = expand_column_range(col_range)
                    for col_letter in cols:
                        if col_letter in used_cols_letters:
                            col_idx = column_index_from_string(col_letter)
                            for row in range(CONFIG['min_row'], last_row + 1):
                                cell = ws.cell(row=row, column=col_idx)
                                wrap = cell.alignment.wrap_text if cell.alignment else False
                                cell.alignment = Alignment(
                                    vertical=vertical,
                                    horizontal=horizontal,
                                    wrap_text=wrap
                                )
                            applied_cols.add(col_letter)
                log(f"‚úÖ –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ: {', '.join(sorted(applied_cols))}")

            if CONFIG['stages']['formatting']:
                log("üé® –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")

                font_name = CONFIG['font'].get('name', 'Times New Roman')
                font_size = CONFIG['font'].get('size', 14)
                font_bold = CONFIG['font'].get('bold', False)
                font_italic = CONFIG['font'].get('italic', False)
                font_underline = 'single' if CONFIG['font'].get('underline', False) else None

                base_font = Font(
                    name=font_name,
                    size=font_size,
                    bold=font_bold,
                    italic=font_italic,
                    underline=font_underline
                )

                border_style = CONFIG.get('border_style', 'thin')
                border = Border(
                    left=Side(style=border_style),
                    right=Side(style=border_style),
                    top=Side(style=border_style),
                    bottom=Side(style=border_style)
                )

                for row in range(CONFIG['min_row'], last_row + 1):
                    temp_color_cell = temp_ws.cell(row=row, column=column_index_from_string(CONFIG['color_column']))
                    has_color = get_cell_color(temp_color_cell) not in [None, 'FFFFFFFF', '00000000']
                    level = levels.get(row, 9)

                    for col in used_cols:
                        cell = ws.cell(row=row, column=col)

                        is_bold_level = level in CONFIG.get('bold_levels', [1, 2])
                        current_font = Font(
                            name=font_name,
                            size=font_size,
                            bold=font_bold or is_bold_level,
                            italic=font_italic,
                            underline=font_underline
                        )
                        cell.font = current_font

                        cell.border = border

                        if hasattr(CONFIG, 'fill_color') and CONFIG['fill_color']:
                            color = CONFIG['fill_color'].replace("#", "") if CONFIG['fill_color'].startswith("#") else CONFIG['fill_color']
                            cell.fill = PatternFill(start_color=color, end_color=color, fill_type="solid")

                        if hasattr(CONFIG, 'text_color') and CONFIG['text_color']:
                            text_color = CONFIG['text_color'].replace("#", "") if CONFIG['text_color'].startswith("#") else CONFIG['text_color']
                            cell.font = Font(
                                name=font_name,
                                size=font_size,
                                bold=font_bold or is_bold_level,
                                italic=font_italic,
                                underline=font_underline,
                                color=text_color
                            )

                        if has_color and temp_color_cell.fill and CONFIG['stages']['hierarchy_colors']:
                            cell.fill = copy(temp_color_cell.fill)

                log("‚úÖ –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–º–µ–Ω–µ–Ω–æ")

            if CONFIG['stages']['number_formats'] and CONFIG['column_formats']:
                log("üî¢ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —á–∏—Å–ª–æ–≤—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤...")
                for col_range, num_format in CONFIG['column_formats'].items():
                    cols = expand_column_range(col_range)
                    for col_letter in cols:
                        if col_letter in used_cols_letters:
                            col_idx = column_index_from_string(col_letter)
                            for row in range(CONFIG['min_row'], last_row + 1):
                                cell = ws.cell(row=row, column=col_idx)
                                if cell.value is not None:
                                    try:
                                        cell.number_format = num_format
                                    except Exception as e:
                                        log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ {num_format} –≤ {col_letter}{row}: {e}")
                log("‚úÖ –ß–∏—Å–ª–æ–≤—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –ø—Ä–∏–º–µ–Ω–µ–Ω—ã")

            log(f"‚úÖ –õ–∏—Å—Ç '{sheet_name}' –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±—Ä–∞–±–æ—Ç–∞–Ω")

        wb.save(CONFIG['output_file'])
        log(f"\nüéâ –£–°–ü–ï–®–ù–û: —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω—ë–Ω!")
        log(f"üìÅ {CONFIG['output_file']}")

        try:
            test_wb = load_workbook(CONFIG['output_file'], read_only=True)
            log("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—É—Å–∫ —É—Å–ø–µ—à–µ–Ω ‚Äî —Ñ–∞–π–ª –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω.")
            test_wb.close()
        except Exception as e:
            log(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–æ–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏: {e}")

        return True, "–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ."

    except Exception as e:
        error_msg = f"‚ùå –û—à–∏–±–∫–∞: {str(e)}"
        log(error_msg)
        return False, error_msg